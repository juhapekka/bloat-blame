#!/usr/bin/env python

### Copyright (C) 2012 YouView TV Ltd.

### This program is free software; you can redistribute it and/or modify
### it under the terms of the GNU General Public License as published by
### the Free Software Foundation; either version 2 of the License, or
### (at your option) any later version.

### This program is distributed in the hope that it will be useful,
### but WITHOUT ANY WARRANTY; without even the implied warranty of
### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
### GNU General Public License for more details.

### You should have received a copy of the GNU General Public License
### along with this program; if not, write to the Free Software
### Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

from __future__ import division
from subprocess import Popen, PIPE
from optparse import OptionParser
import os
import sys
import time

def bar(progress, width):
    n = int(progress * width)
    return n * '#' + (width - n) * ' '

def summarize(filename, extent):
    addr2line = Popen(["addr2line", "-e", filename], stdin=PIPE, stdout=PIPE, stderr=sys.stderr)
    if os.fork() == 0:
        # Child
        addr2line.stdout.close()
        for i in xrange(extent[0], extent[1]):
            addr2line.stdin.write(hex(i)+'\n')
        sys.exit(0)
    else:
        # Parent
        addr2line.stdin.close()
        summary = {}
        n=0
        total=extent[1] - extent[0]
        starttime = time.time()
        for i in addr2line.stdout:
            if n % 1000 == 0:
                t = time.time()
                if t == starttime or n == 0:
                    eta = 0
                else:
                    eta = (t - starttime) / n * (total - n)
                sys.stderr.write('[%s] %8d / %d [ETA %2d:%02ds]\r' % (bar(n/total, 40), n, total, eta//60, int(eta) % 60 ))
            (path, line_no) = i.split(':')
            if (path, line_no) not in summary:
                summary[(path, line_no)] = 0
            summary[(path, line_no)] += 1
            n += 1
        addr2line.stdout.close()
        return summary

def get_text_extents(filename):
    """
    Gets the extents of the .text section of the file
    """
    readelf = Popen(["readelf", "--wide", "--section-headers", filename], stdout=PIPE)
    for line in readelf.stdout:
        if line[7:12] == ".text":
            r = line[7:].split()
            addr=int(r[2], 16)
            size=int(r[4], 16)
            return (addr, addr+size)
#    raise ... <- TODO

def main(argv):
    parser = OptionParser("usage: %prog [options] lib1")
    parser.add_option("--extent", dest="extent", help="The byte range of file to analyse [all|.text]", default="all")

    (options, args) = parser.parse_args(argv[1:])

    if len(args) != 1:
        sys.stderr('No binary provided for analysis')
        parser.print_usage(sys.stderr)
        return 1

    filename = args[0]
    if options.extent == 'all':
        extent=(0, os.path.getsize(filename))
    elif options.extent == '.text':
        extent=get_text_extents(filename)
    else:
        parser.print_usage(sys.stderr)
        return 1
    summary = summarize(filename, extent)
    
    freqs = [(v, k[0], k[1]) for k, v in summary.iteritems()]
    freqs.sort(cmp, lambda x: x[0])
    for i in freqs:
        sys.stdout.write("%d\t%s:%s" % i)
    return 0

if __name__ == '__main__':
    sys.exit(main(sys.argv))
